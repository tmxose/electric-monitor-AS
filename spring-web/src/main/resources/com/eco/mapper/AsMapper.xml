<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eco.mapper.AsMapper">
	<!-- SELECT -->
	<!-- AS 신고내역 전체 조회 -->
	<select id="selectAllAsList" resultType="com.eco.domain.vo.ASVO">
		<![CDATA[
		SELECT * FROM T_AS
		WHERE use_yn = 'Y'
		]]>
	</select>
	<!-- 해당 지역의 AS 신고내역 전체 조회 -->
	<select id="selectAllAsListByRegion" resultType="com.eco.domain.DTO.AvailableStaffDTO">
		<![CDATA[		
		WITH RECURSIVE time_slots AS (
		  SELECT TIME('09:00:00') AS slot_time
		  UNION ALL
		  SELECT slot_time + INTERVAL 1 HOUR
		  FROM time_slots
		  WHERE slot_time < '17:00:00'
		)

		SELECT 
		  s.staff_cd,
		  s.staff_nm,
		  s.staff_addr,
		  ts.slot_time,
		  a.as_cd,
		  a.as_date,
		  a.as_addr
		FROM 
		  T_STAFF s
		CROSS JOIN 
		  time_slots ts
		LEFT JOIN 
		  T_AS a 
		  ON s.staff_cd = a.staff_cd 
		  AND DATE(a.as_date) = #{date}
		  AND TIME(a.as_date) = ts.slot_time
		  AND a.use_yn = 'Y'
		WHERE 
		  s.staff_addr LIKE CONCAT(#{region}, '%')
		   AND s.use_yn = 'Y'
		ORDER BY 
		  s.staff_cd, ts.slot_time;
		]]>
	</select>
	<!-- 기사에 해당하는 AS 신고내역 조회 -->
	<select id="selectAsListByStaff"
		resultType="com.eco.domain.vo.ASVO" parameterType="int">
        <![CDATA[
        SELECT * FROM T_AS
        WHERE staff_cd = #{staffCd}
        AND use_yn = 'Y'
        ]]>
	</select>
	<!-- 사용자에 해당하는 AS 신고내역 조회 -->
	<select id="selectAsListByUser" resultType="com.eco.domain.vo.ASVO">
        <![CDATA[
        SELECT * FROM T_AS
        WHERE user_cd = #{user_cd}
        AND use_yn = 'Y'
        ]]>
	</select>
	
	<!-- 사용자에 해당하는 AS 신고내역 조회(페이징 처리) -->
	<select id="selectAsListByUserPaging" resultType="com.eco.domain.vo.ASVO">
	    <![CDATA[
	    SELECT * FROM T_AS
	    WHERE user_cd = #{user_cd}
	      AND use_yn = 'Y'
	    ORDER BY as_cd DESC
	    LIMIT #{size} OFFSET #{offset}
	    ]]>
	</select>
	
	<!-- 사용자에 해당하는 AS 신고내역 조회(페이징 처리) 예약 날짜 기준 정렬 -->
	<select id="selectAsListByUserOrderByDatePaging" resultType="com.eco.domain.vo.ASVO">
	    <![CDATA[
	    SELECT * FROM T_AS
	    WHERE user_cd = #{user_cd}
	      AND use_yn = 'Y'
	    ORDER BY as_date DESC
	    LIMIT #{size} OFFSET #{offset}
	    ]]>
	</select>
	
	<!-- 사용자에 해당하는 AS 신고내역 갯수 카운트 -->
	<select id="selectAsCountByUser" resultType="int">
	     <![CDATA[
	     SELECT COUNT(*) FROM T_AS
	    WHERE user_cd = #{user_cd}
	      AND use_yn = 'Y'
	      ]]>
	</select>
	
	<!-- AS 신고 수정 화면에 해당 신고 정보 출력 -->
	<select id="selectAsDetailByCommon" resultType="com.eco.domain.vo.ASVO">
        <![CDATA[
       SELECT * FROM T_AS
		WHERE as_cd = #{as_cd}
		    AND use_yn = 'Y';
        ]]>
	</select>
	
	<select id="selectAsListDetailByCommon" resultType="com.eco.domain.DTO.ASListDTO">
	        <![CDATA[
	       SELECT
			    A.*, 
			    B.* 
			FROM
			    T_AS A
			JOIN
			    T_STAFF B ON A.staff_cd = B.staff_cd
			WHERE
			    A.as_cd = #{as_cd}
			    AND A.use_yn = 'Y';
	        ]]>
		</select>
	<!-- 기사 조회 -->
	<select id="selectAsStaff" resultType="int" parameterType="map">
		<![CDATA[
		    SELECT s.staff_cd FROM t_staff s LEFT JOIN t_as a ON a.staff_cd = s.staff_cd
			AND DATE(a.as_date) = #{date} AND TIME(a.as_date) = STR_TO_DATE(#{time}, '%H:%i:%s') AND a.use_yn = 'Y'
			WHERE s.staff_addr LIKE CONCAT('%', #{addr}, '%') AND s.use_yn = 'Y' AND s.staff_role = 'staff'
			GROUP BY s.staff_cd ORDER BY COUNT(a.as_cd) ASC LIMIT 1;
		]]>
	</select>


	<!-- AS 신고내역 전체 조회 -->
	<select id="selectAllAsDtoList"
		resultType="com.eco.domain.DTO.ASListDTO">
		<![CDATA[
		SELECT A.as_cd, A.as_title, A.as_content, A.as_date, A.as_addr, A.as_facility, A.as_status, A.user_cd,
				U.user_id, U.user_nm, U.user_mail, U.user_addr, U.user_social, A.staff_cd, S.staff_id,
		  		S.staff_nm, S.staff_addr, S.staff_role, A.guest_mail, A.guest_nm, A.use_yn
		FROM t_as A
		LEFT JOIN t_user U ON A.user_cd = U.user_cd
		LEFT JOIN t_staff S ON A.staff_cd = S.staff_cd
		WHERE A.use_yn = 'Y'
		]]>
	</select>

	<!-- 기사에 해당하는 AS 신고내역 조회 -->
	<select id="selectAsDtoListByStaff"
		resultType="com.eco.domain.DTO.ASListDTO" parameterType="int">
        <![CDATA[
        SELECT A.as_cd, A.as_title, A.as_content, A.as_date, A.as_addr, A.as_facility, A.as_status, A.user_cd,
		  		U.user_id, U.user_nm, U.user_mail, U.user_addr, U.user_social, A.staff_cd, S.staff_id,
		  		S.staff_nm, S.staff_addr, S.staff_role, A.guest_mail, A.guest_nm, A.use_yn
		FROM T_AS A
		LEFT JOIN T_USER U ON A.user_cd = U.user_cd
		LEFT JOIN T_STAFF S ON A.staff_cd = S.staff_cd
		WHERE A.staff_cd = #{staffCd} AND A.use_yn = 'Y'
        ]]>
	</select>

	<!-- 상세 조회 -->
	<select id="selectAsTask" resultType="com.eco.domain.DTO.ASListDTO"
		parameterType="int">
	    <![CDATA[
	    SELECT a.*, s.staff_nm, u.user_nm
	    FROM t_as a
	    LEFT JOIN t_staff s ON a.staff_cd = s.staff_cd
	    LEFT JOIN t_user u ON a.user_cd = u.user_cd
	    WHERE a.as_cd = #{asCd}
	    AND a.use_yn = 'Y'
	    ]]>
	</select>

    <!-- 직원별 날짜별 AS 일정 조회 -->
    <select id="selectScheduleByStaffAndDate" resultType="com.eco.domain.DTO.ASListDTO">
        <![CDATA[
        SELECT  a.as_cd, a.as_title, a.as_content, a.as_date,
	      TIME_FORMAT(a.as_date, '%H:%i') AS as_time, -- MySQL 기준. Oracle이면 TO_CHAR 써야 함.
	      a.as_status, a.as_addr, a.as_facility, a.user_cd, s.staff_nm
	    FROM T_AS a
	    LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
	    WHERE DATE(a.as_date) BETWEEN #{start} AND #{end} and a.use_yn = 'Y'
	    AND s.staff_id = #{staffInfo}
	    ORDER BY a.as_date
        ]]>
    </select>
    <!-- 관리자의 날짜별 AS 일정 조회 -->
	<select id="selectScheduleByDate" resultType="com.eco.domain.DTO.ASListDTO">
        <![CDATA[
        SELECT 
	      a.as_cd, a.as_title, a.as_content, a.as_date,
	      TIME_FORMAT(a.as_date, '%H:%i') AS as_time, -- MySQL 기준. Oracle이면 TO_CHAR 써야 함.
	      a.as_status, a.as_addr, a.as_facility, a.user_cd, s.staff_nm
	    FROM T_AS a
	    LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
	    WHERE DATE(a.as_date) BETWEEN #{start} AND #{end} and a.use_yn = 'Y'
		AND (
			s.staff_nm LIKE CONCAT('%', #{staffInfo}, '%')
			OR s.staff_id = #{staffInfo}
		)
	    ORDER BY a.as_date
        ]]>
    </select>
    <!-- 직원 관리자의 AS 일정조회 페이징 기법 추가 -->
    <select id="selectAsScheduleByPeriodAndStaffPaged" resultType="com.eco.domain.DTO.ASListDTO">
        <![CDATA[
        SELECT
          a.as_cd, a.as_title, a.as_content, a.as_date,
          TIME_FORMAT(a.as_date, '%H:%i') AS as_time,
          a.as_status, a.as_addr, a.as_facility, a.user_cd, s.staff_nm
        FROM T_AS a
        LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
        WHERE DATE(a.as_date) BETWEEN #{startDate} AND #{endDate} and a.use_yn = 'Y'
        AND (
            s.staff_nm LIKE CONCAT('%', #{staffInfo}, '%')
            OR s.staff_id = #{staffInfo}
        )
        ORDER BY a.as_date
        LIMIT #{limit} OFFSET #{offset}
        ]]>
    </select>
    <!-- 직원 관리자의 AS 일정조회 페이징 기법 추가 -->
     <select id="countAsScheduleByPeriodAndStaff" resultType="long">
        <![CDATA[
        SELECT
            COUNT(a.as_cd)
        FROM T_AS a
        LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
        WHERE DATE(a.as_date) BETWEEN #{startDate} AND #{endDate} and a.use_yn = 'Y'
        AND (
            s.staff_nm LIKE CONCAT('%', #{staffInfo}, '%')
            OR s.staff_id = #{staffInfo}
        )
        ]]>
    </select>
	<!-- 직원 관리자의 AS 일정조회 페이징 기법 추가 -->
    <select id="selectAsScheduleByStaffAndDatePaged" resultType="com.eco.domain.DTO.ASListDTO">
        <![CDATA[
        SELECT
          a.as_cd, a.as_title, a.as_content, a.as_date,
          TIME_FORMAT(a.as_date, '%H:%i') AS as_time,
          a.as_status, a.as_addr, a.as_facility, a.user_cd, s.staff_nm
        FROM T_AS a
        LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
        WHERE DATE(a.as_date) BETWEEN #{startDate} AND #{endDate} and a.use_yn = 'Y'
        AND s.staff_id = #{staffId}
        ORDER BY a.as_date
        LIMIT #{limit} OFFSET #{offset}
        ]]>
    </select>
    
	<!-- 직원 관리자의 AS 일정조회 페이징 기법 추가 -->
    <select id="countAsScheduleByStaffAndDate" resultType="long">
        <![CDATA[
        SELECT
            COUNT(a.as_cd)
        FROM T_AS a
        LEFT JOIN T_STAFF s ON a.staff_cd = s.staff_cd
        WHERE DATE(a.as_date) BETWEEN #{startDate} AND #{endDate} and a.use_yn = 'Y'
        AND s.staff_id = #{staffId}
        ]]>
    </select>
    
	<!-- 사용자에 해당하는 AS 신고내역 조회(날짜순) -->
    <select id="selectUserAsListOrderByAsDate" resultType="com.eco.domain.vo.ASVO" parameterType="int">
	    <![CDATA[
	    SELECT * FROM T_AS
	    WHERE user_cd = #{user_cd}
	    AND use_yn = 'Y'
	    ORDER BY as_date;
	    ]]>
    </select>   
        
	<!-- 게스트에 해당하는 AS 신고내역 조회 -->
	<select id="selectAsListByGuest" resultType="com.eco.domain.vo.ASVO" parameterType="com.eco.domain.DTO.GuestDTO">
        <![CDATA[
        SELECT * FROM T_AS
        WHERE guest_mail = #{guest_mail} AND guest_nm = #{guest_nm}
        AND use_yn = 'Y'
        ]]>
	</select>
	
	<!-- 게스트에 해당하는 AS 신고내역 조회(날짜순) -->
    <select id="selectGuestAsListOrderByAsDate" resultType="com.eco.domain.vo.ASVO" parameterType="com.eco.domain.DTO.GuestDTO">
	    <![CDATA[
	    SELECT * FROM T_AS
	    WHERE guest_mail = #{guest_mail} AND guest_nm = #{guest_nm}
	    AND use_yn = 'Y'
	    ORDER BY as_date;
	    ]]>
    </select> 
    
    <!-- 게스트 AS 리스트 페이징 조회 -->
	<select id="selectGuestAsListWithPaging" resultType="com.eco.domain.vo.ASVO">
	    <![CDATA[
	    SELECT * 
	    FROM T_AS
	    WHERE guest_mail = #{guest_mail}
	      AND guest_nm = #{guest_nm}
	      AND use_yn = 'Y'
	    ORDER BY as_cd DESC
	    LIMIT #{size} OFFSET #{offset}
	    ]]>
	</select>
    <!-- 게스트 AS 리스트 페이징 + 예약일자순 -->
	<select id="selectGuestAsListOrderByAsDateWithPaging" resultType="com.eco.domain.vo.ASVO" >
	    <![CDATA[
	    SELECT * 
	    FROM T_AS
	    WHERE guest_mail = #{guest_mail}
	      AND guest_nm = #{guest_nm}
	      AND use_yn = 'Y'
	    ORDER BY as_date DESC
	    LIMIT #{size} OFFSET #{offset}
	    ]]>
	</select>
	    <!-- 게스트 AS 전체 개수 -->
	<select id="countGuestAsList" resultType="int" parameterType="com.eco.domain.DTO.GuestDTO">
	    <![CDATA[
	    SELECT COUNT(*) 
	    FROM T_AS
	    WHERE guest_mail = #{guest_mail}
	      AND guest_nm = #{guest_nm}
	      AND use_yn = 'Y'
	    ]]>
	</select>
	
	<!-- INSERT -->
	<!-- 일반 회원의 AS 신고 -->
	<insert id="insertAsListByCommon" parameterType="com.eco.domain.vo.ASVO" useGeneratedKeys="true" keyProperty="as_cd">
	  <![CDATA[
	    INSERT INTO t_as(user_cd, user_mail, as_title, as_content, as_date, as_addr, as_facility)
	    VALUES(#{user_cd}, #{user_mail}, #{as_title}, #{as_content},
	           #{as_date}, #{as_addr}, #{as_facility});
	    ]]>
	</insert>
	
	<!-- 일반 회원의 AS 신고 -->
	<insert id="insertAsListByGuest" parameterType="com.eco.domain.vo.ASVO" useGeneratedKeys="true" keyProperty="as_cd">
	  <![CDATA[
	    INSERT INTO t_as(as_title, as_content, as_date, as_addr, as_facility, guest_mail, guest_nm)
	    VALUES(#{as_title}, #{as_content}, #{as_date}, 
	    	#{as_addr}, #{as_facility}, #{guest_mail}, #{guest_nm});
	    ]]>
	</insert>
	
	<!-- UPDATE -->
	<!-- 기사 배정 -->
	<update id="updateMatchStaff" parameterType="map">
		<![CDATA[
	    UPDATE t_as SET staff_cd = #{staff_cd} WHERE as_cd = #{as_cd};
		]]>
	</update>

	<!-- AS 신고 수정 -->
	<update id="updateAsListByCommon" parameterType="com.eco.domain.vo.ASVO">
        <![CDATA[
		    UPDATE t_as set user_mail=#{user_mail}, as_title=#{as_title}, as_content=#{as_content}, 
		    as_date=#{as_date}, as_addr=#{as_addr}, as_facility=#{as_facility}
		    WHERE as_cd=#{as_cd}
	    ]]>
	</update>
	
	<!-- AS 신고 수정(게스트) -->
	<update id="updateAsListByGuest" parameterType="com.eco.domain.vo.ASVO">
        <![CDATA[
		    UPDATE t_as set guest_mail=#{guest_mail}, as_title=#{as_title}, as_content=#{as_content}, 
		    as_date=#{as_date}, as_addr=#{as_addr}, as_facility=#{as_facility}
		    WHERE as_cd=#{as_cd}
	    ]]>
	</update>
	
	<!-- AS 신고 삭제 -->
	<update id="deleteAsListByCommon" parameterType="com.eco.domain.vo.ASVO">
        <![CDATA[
		    UPDATE t_as set use_yn='N', as_status = '예약 취소'
		    WHERE as_cd=#{as_cd}
	    ]]>
	</update>
	
	<!-- 관리자/기사의 상황 업데이트 -->
	<update id="updateStatusByCd">
	    <![CDATA[
	    UPDATE T_AS
	    SET as_status = #{as_status}
	    WHERE as_cd = #{as_cd}
	    ]]>
	</update>
	
	<!-- 회원 탈퇴시 미래 예약건 취소 -->
	<update id="deleteAsListBydeleteUser">
	    <![CDATA[
	    UPDATE T_AS SET use_yn = 'N'
	    WHERE user_cd = #{user_cd} AND as_date > CURRENT_DATE() AND as_status = '신고 접수'
	    ]]>
	</update>
	
	
    
</mapper>